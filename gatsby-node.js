const path = require('path');
const slugify = require('slugify');

exports.createPages = async ({graphql, actions, reporter}) => {
  // Destructure the createPage function from the actions object
  const {createPage, createRedirect} = actions;

  const result = await graphql(`
    query {
      allMdx(
        filter: {frontmatter: {chapter: {ne: null}}}
        sort: {fields: [frontmatter___chapter, frontmatter___paragraph], order: [ASC, ASC]}
      ) {
        edges {
          next {
            id
            frontmatter {
              title
            }
          }
          node {
            id
            frontmatter {
              title
            }
          }
          previous {
            id
            frontmatter {
              title
            }
          }
        }
      }
      cases: allMdx(
        filter: {frontmatter: {chapter: {eq: null}}}
        sort: {fields: fileAbsolutePath, order: ASC}
      ) {
        edges {
          next {
            id
            frontmatter {
              title
            }
          }
          node {
            id
            frontmatter {
              title
            }
          }
          previous {
            id
            frontmatter {
              title
            }
          }
        }
      }
    }
  `);

  if (result.errors) {
    reporter.panicOnBuild('ðŸš¨  ERROR: Loading "createPages" query');
  }

  // Create blog post pages.
  const posts = result.data.allMdx.edges;

  // you'll call `createPage` for each result
  posts.forEach(({node, next, previous}) => {
    createPage({
      // The slug generated by gatsby-plugin-mdx doesn't contain a slash at the beginning
      // You can prepend it with any prefix you want
      path: `/basic-knowledge/${slugify(node.frontmatter.title, {lower: true})}`, // This component will wrap our MDX content
      component: path.resolve(`./src/components/DocLayout.js`), // You can use the values in this context in
      // our page layout component
      context: {
        id: node.id,
        next: next && {
          path: `/basic-knowledge/${slugify(next.frontmatter.title, {lower: true})}`,
          title: next.frontmatter.title,
        },
        previous: previous && {
          path: `/basic-knowledge/${slugify(previous.frontmatter.title, {lower: true})}`,
          title: previous.frontmatter.title,
        },
      },
    });
  });

  createRedirect({
    fromPath: '/basic-knowledge',
    toPath: `/basic-knowledge/${slugify(posts[0].node.frontmatter.title, {lower: true})}`,
    isPermanent: true,
    redirectInBrowser: true,
  });

  const {cases} = result.data;
  // you'll call `createPage` for each result
  cases.edges.forEach(({node, next, previous}) => {
    if (!next) {
      next = cases.edges[0].node;
    }

    if (!previous) {
      previous = cases.edges[cases.edges.length - 1].node;
    }

    createPage({
      // The slug generated by gatsby-plugin-mdx doesn't contain a slash at the beginning
      // You can prepend it with any prefix you want
      path: `/case-studies/${slugify(node.frontmatter.title, {lower: true})}`, // This component will wrap our MDX content
      component: path.resolve(`./src/components/CaseStudyLayout.js`), // You can use the values in this context in
      // our page layout component
      context: {
        id: node.id,
        next: next && {
          path: `/case-studies/${slugify(next.frontmatter.title, {lower: true})}`,
          title: next.frontmatter.title,
        },
        previous: previous && {
          path: `/case-studies/${slugify(previous.frontmatter.title, {lower: true})}`,
          title: previous.frontmatter.title,
        },
      },
    });
  });
};

exports.onCreateNode = function onCreateNode({
  node,
  getNodesByType,
  actions: {createParentChildLink},
}) {
  if (node.internal.type === 'Mdx' && node.fileAbsolutePath.match(/casestudies/i)) {
    const {thumbnail} = node.frontmatter;

    const files = getNodesByType('File');

    const file = files.find(({relativePath}) => relativePath === thumbnail);

    if (file) {
      createParentChildLink({parent: node, child: file});
    } else {
      console.error("Couldn't find thumbnail file for ", node.frontmatter.title);
    }
  }
};
